name: testing

on:
  workflow_dispatch:
  schedule:
    - cron: 42 4 * * 2     #  04:42 on Tuesdays

jobs:
  setup:
    name: download
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest']
    runs-on: ${{ matrix.os }}
    steps:

      - if: ${{ matrix.os == 'ubuntu-latest' }}
        name: Create ~/asr_data directory with embedding file in it (Linux)
        shell: bash
        run: |
          mkdir ~/asr_data
          cd ~/asr_data
          curl https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.en.300.vec.gz -o fasttext.cc.en.300.vec.gz
          gunzip fasttext.cc.en.300.vec.gz

      - if: ${{ matrix.os == 'macos-latest' }}
        name: Create ~/asr_data directory with embedding file in it (Mac)
        shell: bash
        run: |
          mkdir ~/asr_data
          cd ~/asr_data
          curl https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.en.300.vec.gz -o fasttext.cc.en.300.vec.gz
          gunzip fasttext.cc.en.300.vec.gz

      - if: ${{ matrix.os == 'windows-latest' }}
        name: Create C:\Users\runneradmin\asr_data directory with embedding file in it (Windows)
        shell: pwsh
        run: |
          New-Item -Path C:\Users\runneradmin -Name "asr_data" -ItemType "directory"
          cd C:\Users\runneradmin\asr_data
          Invoke-WebRequest -Uri https://dl.fbaipublicfiles.com/fasttext/vectors-crawl/cc.en.300.vec.gz -Outfile fasttext.cc.en.300.vec.gz
          Expand-Archive -Path fasttext.cc.en.300.vec.gz -Force
          dir

      - if: ${{ matrix.os == 'ubuntu-latest' }}
        name: Commit embedding data to cache (Linux)
        uses: actions/cache/save@v3.3.2
        with:
          path: ~/asr_data/fasttext.cc.en.300.vec
          key: thekey-${{ matrix.os }}-${{ github.run_id }}

      - if: ${{ matrix.os == 'macos-latest' }}
        name: Commit embedding data to cache (Mac)
        uses: actions/cache/save@v3.3.2
        with:
          path: ~/asr_data/fasttext.cc.en.300.vec
          key: thekey-${{ matrix.os }}-${{ github.run_id }}

      - if: ${{ matrix.os == 'windows-latest' }}
        name: Commit embedding data to cache (Windows)
        uses: actions/cache/save@v3.3.2
        with:
          path: C:\Users\runneradmin\asr_data\fasttext.cc.en.300.vec
          key: thekey-${{ matrix.os }}-${{ github.run_id }}


  test:
    name: asr${{ matrix.asreview-version }}-${{ matrix.tensorflow }}-py${{ matrix.python-version }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        asreview-version: [ '1.0.4', '1.1.1', '1.2.1' ]
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: [ '3.8', '3.9', '3.10', '3.11']
        include:
          # On python >= 3.11, pip complains that tensorflow wants to be >= 2.10,
          # but asreview <= 1.2.1 wants tensorflow to be < 2.10
          - python-version: '3.8'
            tensorflow: 'with-tf'
          - python-version: '3.9'
            tensorflow: 'with-tf'
          - python-version: '3.10'
            tensorflow: 'with-tf'
          - python-version: '3.11'
            tensorflow: 'without-tf'
    steps:

      - if: ${{ matrix.os == 'ubuntu-latest' }}
        name: Retrieve embedding data from cache (Linux)
        uses: actions/cache/restore@v3.3.2
        with:
          path: ~/asr_data/fasttext.cc.en.300.vec
          key: thekey-${{ matrix.os }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - if: ${{ matrix.os == 'macos-latest' }}
        name: Retrieve embedding data from cache (Mac)
        uses: actions/cache/restore@v3.3.2
        with:
          path: ~/asr_data/fasttext.cc.en.300.vec
          key: thekey-${{ matrix.os }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - if: ${{ matrix.os == 'windows-latest' }}
        name: Retrieve embedding data from cache (Windows)
        uses: actions/cache/restore@v3.3.2
        with:
          path: C:\Users\runneradmin\asr_data\fasttext.cc.en.300.vec
          key: thekey-${{ matrix.os }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Get a copy of the code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Show python info
        shell: bash
        run: |
          which python
          python --version

      - if: ${{ matrix.tensorflow == 'with-tf' }}
        name: Install dependencies (with tensorflow)
        shell: bash
        run: |
          python3 -m pip install --upgrade pip wheel setuptools
          python3 -m pip install asreview==${{ matrix.asreview-version }}
          python3 -m pip install .[doc2vec,sbert,tensorflow,testing]

      - if: ${{ matrix.tensorflow == 'without-tf' }}
        name: Install dependencies (without tensorflow)
        shell: bash
        run: |
          python3 -m pip install --upgrade pip wheel setuptools
          python3 -m pip install asreview==${{ matrix.asreview-version }}
          python3 -m pip install .[doc2vec,sbert,testing]

      - name: Run unit tests
        shell: bash
        run: pytest tests/unit

      - name: Run mocked tests
        shell: bash
        run: pytest tests/mocked

      - if: ${{ matrix.tensorflow == 'with-tf' }}
        name: Run integration tests (with tensorflow)
        shell: bash
        # fex_sbert takes too long and causes timeout errors
        run: pytest -m 'not fex_sbert' tests/it

      - if: ${{ matrix.tensorflow == 'without-tf' }}
        name: Run integration tests (without tensorflow)
        shell: bash
        # fex_sbert takes too long and causes timeout errors
        # cls_nn_2_layer needs tensorflow that has install problems for py > 3.10
        run: pytest -m 'not fex_sbert and not cls_nn_2_layer' tests/it
